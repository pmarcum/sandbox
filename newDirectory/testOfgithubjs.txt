[{"type":"acro","priority":"1","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         this.startDef = \"-1\";\n         this.endDef = \"-1\";\n         var smallWords =\n           ['aka','al','am','an','and','are','as','at','be','by','do','eg','et','etal','etc',\n            'go','he','ie','if','in','io','is','it','me','my','no','ok','on','or','ox','pi',\n            'qi','so','to','we','xi'];\n         var linkedTo = [];\n         var from = [];\n         var i = 0;\n         var j = 0;\n         var k = 0;\n         var a1 = 0;\n         var a2 = 0;\n         var w1 = 0;\n         var w2 = 0;\n         var tst = '';\n         var t = '';\n         var endMatch = -1;\n         var acroPos1 = [];\n         var wordsPos1 = [];\n         var acroPos2 = [];\n         var wordsPos2 = [];\n         var acroPos = [];\n         var wordsPos = [];\n         var aPos = [];\n         var wPos = [];\n         var aTmp = '';\n         var wTmp = '';\n         var dist = [];\n         var alength = [];\n         var acro = '';\n         var acroDef = '';\n         var fullAcro = false;\n         var twoWordMin = false;\n         var noCherryPicking = true;\n         var noSkippedWords = true;\n         var caseMatch = false;\n         var acroCase = false;\n         var twoChars = false;\n         var notShortWord = false;\n         var notSymbol = false;\n         var startSentence = false;\n;\n         var tmp = txt.match(/(?:[\\.\\?\\!])(?:(?: [A-Z])|(?: $)|(?:$))/);\n         if (tmp) {txt = txt.slice(0,tmp.index);}\n;\n         txt = tmp[0];\n;\n         var txtPos = tmp[1];\n;\n         wordIds.push(0);\n         for (i = 1;i < txt.length;i++) {\n           if (txt[i-1].match(/ /) && txt[i].match(/[^ ]/)) {\n             wordIds.push(wordIds[i-1]+1);};\n         wordStarts.push(0);\n         for (i = 1;i < txt.length;i++) {\n           if (txt[i-1].match(/ /) && txt[i].match(/[^ ]/)) {\n             wordStarts.push(i);};i < txt.length-1;i++) {\n           if (txt[i].match(/[A-Za-z0-9]/)) {\n;} return x1;},[]);\n             if (tmp.length > 0) {\n               linkedTo.push(tmp);\n               from.push(i);}\n           }\n         }\n;}\n;i < linkedTo[0].length;i++) {\n           if (wordStarts[linkedTo[0][i]] == linkedTo[0][i]) {\n             acroPos1.push([linkedTo[0][i]]);\n             wordsPos1.push([from[0]]);}\n         }\n         for (i = 1;i < linkedTo.length;i++) {;\n           wPos = [];\n           for (j = 0;j < linkedTo[i].length;j++) {\n             for (k = 0;k < acroPos1.length;k++) {\n;\n               aTmp = aTmp[aTmp.length-1];\n               wTmp = wordsPos1[k];\n               wTmp = wTmp[wTmp.length-1];\n               if ((wordStarts[linkedTo[i][j]] == wordStarts[aTmp] &&;\n                   wPos.push(wordsPos1[k].concat([from[i]]));}\n             }\n           }\n           if (aPos.length > 0) {\n             acroPos1 = acroPos1.concat(aPos);\n             wordsPos1 = wordsPos1.concat(wPos);}\n         }\n         acroPos2 = [];\n         wordsPos2 = [];\n         for (i = 0;i < linkedTo[0].length;i++) {\n           if (wordStarts[linkedTo[0][i]] == linkedTo[0][i]) {\n             wordsPos2.push([linkedTo[0][i]]);\n             acroPos2.push([from[0]]);}\n         }\n         for (i = 1;i < linkedTo.length;i++) {;\n           wPos = [];\n           for (j = 0;j < linkedTo[i].length;j++) {\n             for (k = 0;k < acroPos2.length;k++) {\n               aTmp = acroPos2[k];\n               aTmp = aTmp[aTmp.length-1];\n               wTmp = wordsPos2[k];\n               wTmp = wTmp[wTmp.length-1];\n               if ((wordStarts[from[i]] == wordStarts[aTmp] &&;\n                  wPos.push(wordsPos2[k].concat([linkedTo[i][j]]));}\n             }\n           }\n           if (aPos.length > 0) {\n             acroPos2 = acroPos2.concat(aPos);\n             wordsPos2 = wordsPos2.concat(wPos);}\n         }\n;\n         wordsPos = wordsPos1.concat(wordsPos2);\n;\n         wordsPos = wordsPos.filter(z => z.length > 1);\n;i < acroPos.length;i++) {\n           wTmp = wordsPos[i].map(z => txt.slice(z,z+1)[0]).join('');\n           aTmp = acroPos[i].map(z => txt.slice(z,z+1)[0]).join('');\n           fullAcro = false;\n           twoWordMin = false;\n           noCherryPicking = true;\n           caseMatch = false;\n           acroCase = false;\n           twoChars = false;\n           notShortWord = false;\n           notSymbol = false;\n           noSkippedWords = true;\n           startSentence = false;\n;} return x1;},[]);\n             if (tmp.length == acroPos[i].length) {fullAcro = true;}\n;}\n             if (startPos < text.length-1 && text.charAt(txtPos[Math.max(... acroPos[i])]).match(/[A-Z]/)) {fullAcro = false;}\n;\n             if (tmp !== undefined && tmp && tmp.length > 0 && ([... new Set(tmp)]).sort().length >= 2) {twoWordMin = true;}\n;\n             if (twoWordMin) {\n               for (j = Math.min(... tmp)+1;j < Math.max(... tmp);j++) {\n                 if (tmp.indexOf(j) == -1) {tst.push(j);}\n               }\n             }\n             for (j = 0;j < tst.length;j++) {\n               tmp = wordIds.reduce(function(x1,x2,x3) {\n                 if (x2 == j && txt.slice(x3,x3+1)[0].match(/[A-Za-z0-9]/)) {x1.push(x2);} return x1;},[]);\n                 if (tmp.length <= 3) {noCherryPicking = false;}\n             }\n;\n             a1 = acroPos[i][tmp-1];\n             w1 = wordsPos[i][0];\n             a2 = acroPos[i][0];\n             tmp = wordsPos[i].length;\n             w2 = wordsPos[i][tmp-1];\n             tmp = '';\n             if (wordIds[a1] < (wordIds[w1]-1)) {\n               tmp = txt.reduce(function(x1,x2,x3) {\n                 if (wordIds[x3] > wordIds[a1] && wordIds[x3] < wordIds[w1]) {x1.push(x2);} return x1;},[]);\n                 tmp = tmp.join('').replace(/[^A-Za-z0-9 ]/g,'').replace(/  +/g,' ').trim();\n             } else if (wordIds[w2] < (wordIds[a2]-1)) {\n               tmp = txt.reduce(function(x1,x2,x3) {\n                 if (wordIds[x3] > wordIds[w2] && wordIds[x3] < wordIds[a2]) {x1.push(x2);} return x1;},[]);\n                 tmp = tmp.join('').replace(/[^A-Za-z0-9 ]/g,'').replace(/  +/g,' ').trim();}\n;}\n             tmp =tmp.split(' ');\n             tmp = tmp.filter(z => z.length > 3);};\n             } else if (text.slice(0,startPos).trim() == '') {\n               startSentence = true;\n             } else if (startPos >= 2 && text.slice(startPos-2,startPos).trim() == '\\.') {\n               startSentence = true;}\n             if (aTmp == wTmp) {caseMatch = true;}\n             if (aTmp.match(/^[A-Z0-9]+$/) && wTmp.match(/^[a-z0-9]+$/)) {caseMatch = true;}\n;}\n;}\n             if (aTmp.match(/[A-Z]/) && aTmp.match(/[a-z]/) && aTmp.match(/[A-Z]/g).length > aTmp.match(/[a-z]/g).length) {\n               acroCase = true;}\n;}\n             if (!twoChars) {\n;return x1;},[]);\n                  if (tmp.length > 0 && ([... new Set(tmp)]).length == 1) {twoChars = true;}\n             }\n;}\n;\n             if (tmp == -1) {notSymbol = true;}\n;\n               wordsPos[i] = [-1];}\n         }\n;\n         wordsPos = wordsPos.filter(z => z[0] != -1);\n;\n         alength = [];\n         for (i = 0;i < acroPos.length;i++) {\n           tmp = acroPos[i].map(z => txt.slice(z,z+1)[0]).join('');\n           alength.push(tmp.length);\n           if (acroPos[i][0] > wordsPos[i][0]) {\n             tmp = wordsPos[i].length;\n             dist.push(txt.slice(wordsPos[i][tmp-1]+1,acroPos[i][0]+1).join('').replace(/[^A-Za-z0-9 ]/g,'').length);\n           } else {\n             tmp = acroPos[i].length;\n             dist.push(txt.slice(acroPos[i][tmp-1]+1,wordsPos[i][0]+1).join('').replace(/[^A-Za-z0-9 ]/g,'').length);}\n         }\n         for (i = 0;i < acroPos.length;i++) {\n           if (alength[i] < Math.max(... alength)) {\n             acroPos[i] = [-1];\n             wordsPos[i] = [-1];\n             alength[i] = -1;\n             dist[i] = -1;}\n         }\n         acroPos = acroPos.filter(z => z[0] != -1);\n         wordsPos = wordsPos.filter(z => z[0] != -1);\n         dist = dist.filter(z => z != -1);\n         alength = alength.filter(z => z != -1);\n         tmp = dist.findIndex(z => z == Math.min(... dist));\n         acroDef = '';\n         if (tmp != -1) {\n           acroPos = acroPos[tmp];\n           wordsPos = wordsPos[tmp];\n           acro = acroPos.map(z => txt.slice(z,z+1)[0]).join('');\n           tmp = [... new Set(wordsPos.map(z => wordStarts[z]))];\n           tmp = [Math.min(... tmp), Math.max(... tmp)];\n           tmp[1] = tmp[1] + wordStarts.filter(z => z == tmp[1]).length;\n           acroDef = txt.slice(tmp[0],tmp[1]).join('').replace(/[^A-Za-z0-9]/g,' ').trim();\n           this.startDef = '' + (txtPos[tmp[0]] + startPos);\n           this.endDef = '' + (txtPos[tmp[1]-1] + 1 + startPos);\n           acroDef = acroDef.replace(/  +/,' ').trim();\n           if (acroPos[0] > wordsPos[0]) {\n             this.endMatch = \"\" + (txtPos[Math.max(... acroPos)] + 1 + startPos);\n           } else {\n             this.endMatch = this.endDef;}\n           return acro + ' ' + acroDef.replace(/ /g,'\\_');\n         } else {return '';}\n      }"},{"type":"citation","priority":"1","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         this.authors = \"\";\n         this.pubYear = \"\";\n         this.journal = \"\";\n         this.page = \"\";\n         this.volume = \"\";\n         var authors = [];\n         var pubYear = '';\n         var journal = '';\n         var page = '';\n         var volume = '';\n         var journalAbb = '';\n         var tmp = '';\n         var t = '';\n         var m = '';\n         var t1 = '';\n         var t2 = '';\n         var shortCit = '';\n;\n;});\n         text = text.replace(/([\\, ]+)(sr\\.?)([\\, ]+)/ig, function(x,x1,x2,x3){return x3 + (x1+x2).replace(/[ -~]/g,' ');});\n         text = text.replace(/([\\, ]+)(i+\\.?)([\\, ]+)/ig, function(x,x1,x2,x3){return x3 + (x1+x2).replace(/[ -~]/g,' ');});\n;});\n;});\n;});\n;});\n;})\n;})\n;});\n;});\n;});\n;\n           return tmp + x3.replace(/[^0-9]/g,' ');});\n;\n         tmp = new RegExp(tmp);\n;\n         m = t[0].match(tmp);\n         authors = [];\n         pubYear = '';\n         journal = '';\n         volume = '';\n         page = '';\n         if (m) {\n;\n;\n           t2 = t[1][m[1].length + m[2].length + m[3].length + m[4].length + m[5].length - 1] + 1;\n           page = text.slice(t1,t2).match(/[0-9]+/)[0].replace(/^0+/,\"\");\n;\n           t2 = t[1][m[1].length + m[2].length + m[3].length -1] + 1;\n           journal = text.slice(t1,t2).trim();\n;} return x1;}, [-1,-1,'']);\n           if (tmp[0] != -1 && tmp[1] == journal.length) {\n             journal = tmp[2];\n             journal = journal.filter(z => !z.match(/\\./)).join(\"\\_\");}\n;\n;\n;\n           } else if (authors.length == 3) {\n             shortCit = authors[0]+'etal'+pubYear+ '\\|' +\n                        authors[0]+authors[1]+'and'+authors[2]+pubYear + '\\|' +\n                        authors[0] + authors[1] + authors[2] + pubYear;}\n           pubYear = pubYear.replace(/[a-zA-Z]/g,'');\n           this.endMatch = '' + (t[1][m[0].length-1] + 1 + startPos);\n           this.authors = ([... new Set(authors)]).sort().join('\\_');\n           this.pubYear = \"\"+pubYear;\n           this.journal = journal;\n           this.volume = volume;\n           this.page = page;\n           return shortCit.toLowerCase();\n         } else {\n           return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:[0-9](?![0-9]))|(?:2[0-3])))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?( +[\\+\\-]{0,1} *)((?:(?:[0-8][0-9])|(?:[0-9](?![0-9]))))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?","nChars":"21","type":"ra","priority":"1","x":"","xSupp":"","nVals":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           var tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[2];\n           return tmp[0];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:[0-9](?![0-9]))|(?:2[0-3])))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?( +[\\+\\-]{0,1} *)((?:(?:[0-8][0-9])|(?:[0-9](?![0-9]))))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( *\\: *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?","nChars":"21","type":"dec","priority":"1","x":"","xSupp":"","nVals":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           var tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[3];\n           return tmp[1];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:[0-9](?![0-9]))|(?:2[0-3])) *(?:(?:hours)|(?:hour)|(?:hrs)|(?:hr)|(?:h)))( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m))?)( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:seconds)|(?:second)|(?:sec)|(?:s))?)?( *(?:\\. *[0-9]+)? *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m)|(?:seconds)|(?:second)|(?:sec)|(?:s)))?( *[\\+\\-]{0,1}) *((?:(?:[0-8][0-9])|(?:[0-9](?![0-9]))) *(?:(?:textdegree)|(?:circ)|(?:degrees)|(?:degree)|(?:degs)|(?:deg)|(?:d)))( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m))?)( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:seconds)|(?:second)|(?:sec)|(?:s))?)?( *(?:\\. *[0-9]+)? *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m)|(?:seconds)|(?:second)|(?:sec)|(?:s)))?","nChars":"34","type":"ra","priority":"1","x":"","xSupp":"","nVars":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var tmp = \"\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[2];\n           return tmp[0];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:[0-9](?![0-9]))|(?:2[0-3])) *(?:(?:hours)|(?:hour)|(?:hrs)|(?:hr)|(?:h)))( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m))?)( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:seconds)|(?:second)|(?:sec)|(?:s))?)?( *(?:\\. *[0-9]+)? *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m)|(?:seconds)|(?:second)|(?:sec)|(?:s)))?( *[\\+\\-]{0,1}) *((?:(?:[0-8][0-9])|(?:[0-9](?![0-9]))) *(?:(?:textdegree)|(?:circ)|(?:degrees)|(?:degree)|(?:degs)|(?:deg)|(?:d)))( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m))?)( *(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))) *(?:(?:seconds)|(?:second)|(?:sec)|(?:s))?)?( *(?:\\. *[0-9]+)? *(?:(?:minutes)|(?:minute)|(?:mins)|(?:min)|(?:m)|(?:seconds)|(?:second)|(?:sec)|(?:s)))?","nChars":"34","type":"dec","priority":"1","x":"","xSupp":"","nVars":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         var tmp = \"\";\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[3];\n           return tmp[1];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:[0-9](?![0-9]))|(?:2[0-3])))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?( +[\\+\\-]{0,1} *)((?:[0-8][0-9])|(?:[0-9](?![0-9])))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?","nChars":"18","type":"ra","priority":"1","x":"","xSupp":"","nVars":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         var tmp = \"\";\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[2];\n           return tmp[0];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:[0-9](?![0-9]))|(?:2[0-3])))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?( +[\\+\\-]{0,1} *)((?:[0-8][0-9])|(?:[0-9](?![0-9])))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))( +(?:(?:[0-5][0-9])|(?:[0-9](?![0-9]))))?( *\\. *[0-9]+)?","nChars":"18","type":"dec","priority":"1","x":"","xSupp":"","nVars":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var tmp = \"\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[3];\n           return tmp[1];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:2[0-3])))([0-5][0-9])([0-5][0-9])?(\\.[0-9]+)?([\\+\\-])([0-8][0-9])([0-5][0-9])([0-5][0-9])?(\\.[0-9]+)?","nChars":"18","type":"ra","priority":"1","x":"","xSupp":"","nVars":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var tmp = \"\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[2];\n           return tmp[0];\n         } else {return '';}\n      }"},{"reg":"(^(?:(?:[0-1][0-9])|(?:2[0-3])))([0-5][0-9])([0-5][0-9])?(\\.[0-9]+)?([\\+\\-])([0-8][0-9])([0-5][0-9])([0-5][0-9])?(\\.[0-9]+)?","nChars":"18","type":"dec","priority":"1","x":"","xSupp":"","nVars":"2","indx":"function(text, startPos) {\n         this.endMatch = \"-1\";\n         var tmp = \"\";\n         var m = text.slice(startPos).match(new RegExp('^(?:' + this.reg + ')'));\n         if (m) {\n           this.endMatch = \"\"+(startPos + m[0].length);\n           tmp = extractRaDecVals(this.reg, text.slice(startPos));\n           this.accuracy = tmp[3];\n           return tmp[1];\n         } else {return '';}\n      }"},{"reg":"acoefficient","nChars":"12","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient","x":"*b_*einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"acoefficients","nChars":"13","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient","x":"*b_*einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"acoeff","nChars":"6","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient","x":"*b_*einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"acoeffs","nChars":"7","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient","x":"*b_*einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"einsteincoeff","nChars":"13","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient|*b_*einstein_coefficient","x":"*b_*einstein_coefficient|*a_einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent *b_*einstein_coefficient<X4>a_einstein_coefficient","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"einsteincoeffs","nChars":"14","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient|*b_*einstein_coefficient","x":"*b_*einstein_coefficient|*a_einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent *b_*einstein_coefficient<X4>a_einstein_coefficient","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"einsteincoefficients","nChars":"20","priority":"1","type":"jargon","tIndx":"*a_*einstein_coefficient|*b_*einstein_coefficient","x":"*b_*einstein_coefficient|*a_einstein_coefficient","xSupp":"*a_*einstein_coefficient<X4>*b_einstein_coefficent *b_*einstein_coefficient<X4>a_einstein_coefficient","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"ADC","nChars":"3","priority":"1","type":"jargon","tIndx":"analog_to_digital_converter","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"astar","nChars":"5","priority":"1","type":"jargon","tIndx":"*a_*star","x":"","xSupp":"*a_*star<X4>intermediate_mass|main_sequence","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"astars","nChars":"6","priority":"1","type":"jargon","tIndx":"*a_*star","x":"","xSupp":"*a_*star<X4>intermediate_mass|main_sequence","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"atypestar","nChars":"9","priority":"1","type":"jargon","tIndx":"*a_*star","x":"","xSupp":"*a_*star<X4>intermediate_mass|main_sequence","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"atypestars","nChars":"10","priority":"1","type":"jargon","tIndx":"*a_*star","x":"","xSupp":"*a_*star<X4>intermediate_mass|main_sequence","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"atype","nChars":"5","priority":"1","type":"jargon","tIndx":"*a_*star","x":"","xSupp":"*a_*star<X4>intermediate_mass|main_sequence","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"atypes","nChars":"6","priority":"1","type":"jargon","tIndx":"*a_*star","x":"","xSupp":"*a_*star<X4>intermediate_mass|main_sequence","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"fnu","nChars":"3","priority":"1","type":"jargon","tIndx":"*ab_flux","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"mnu","nChars":"3","priority":"1","type":"jargon","tIndx":"*ab_magnitude","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metal","nChars":"5","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metals","nChars":"6","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metallicity","nChars":"11","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metalicity","nChars":"10","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metalicities","nChars":"12","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metallicities","nChars":"13","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metalicitys","nChars":"11","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"metallicitys","nChars":"12","priority":"1","type":"jargon","tIndx":"abundance","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"agn","nChars":"3","priority":"1","type":"jargon","tIndx":"active_*galaxy_nucleus","x":"quasar","xSupp":"active_*galaxy_nucleus<X4>quasar","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"agns","nChars":"4","priority":"1","type":"jargon","tIndx":"active_*galaxy_nucleus","x":"quasar","xSupp":"active_*galaxy_nucleus<X4>quasar","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"ao","nChars":"2","priority":"1","type":"jargon","tIndx":"adaptive_optics","x":"","xSupp":"adaptive_optics<X4>seeing|diffraction_limited|tip_tilt","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"alp","nChars":"3","priority":"1","type":"jargon","tIndx":"*alpha","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"adu","nChars":"3","priority":"1","type":"jargon","tIndx":"analog_digital_unit","x":"","xSupp":"analog_digital_unit<X4>charge_coupled_device|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"adus","nChars":"4","priority":"1","type":"jargon","tIndx":"analog_digital_unit","x":"","xSupp":"analog_digital_unit<X4>charge_coupled_device|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"dn","nChars":"2","priority":"1","type":"jargon","tIndx":"analog_digital_unit","x":"","xSupp":"analog_digital_unit<X4>charge_coupled_device|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"dns","nChars":"3","priority":"1","type":"jargon","tIndx":"analog_digital_unit","x":"","xSupp":"analog_digital_unit<X4>charge_coupled_device|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"datanumber","nChars":"10","priority":"1","type":"jargon","tIndx":"analog_digital_unit","x":"","xSupp":"analog_digital_unit<X4>charge_coupled_device|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"datanumbers","nChars":"11","priority":"1","type":"jargon","tIndx":"analog_digital_unit","x":"","xSupp":"analog_digital_unit<X4>charge_coupled_device|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"aips","nChars":"4","priority":"1","type":"jargon","tIndx":"astronomical_image_processing_system","x":"","xSupp":"astronomical_image_processing_system<X4>radio|data_reduction_processing","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"aor","nChars":"3","priority":"1","type":"jargon","tIndx":"astronomical_observation_request","x":"","xSupp":"","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"agb","nChars":"3","priority":"1","type":"jargon","tIndx":"asymptotic_giant_branch_*star","x":"red_giant|mira_variable|*ohir_*star","xSupp":"asymptotic_giant_branch_*star<X4>circumstellar_envelope|maser_emission|thermal_pulse","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"agbs","nChars":"4","priority":"1","type":"jargon","tIndx":"asymptotic_giant_branch_*star","x":"red_giant|mira_variable|*ohir_*star","xSupp":"asymptotic_giant_branch_*star<X4>circumstellar_envelope|maser_emission|thermal_pulse","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"bcoefficient","nChars":"12","priority":"1","type":"jargon","tIndx":"*b_*einstein_coefficient","x":"*a_*einstein_coefficient","xSupp":"*b_*einstein_coefficient<X4>*a_einstein_coefficient","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"},{"reg":"bcoefficients","nChars":"13","priority":"1","type":"jargon","tIndx":"*b_*einstein_coefficient","x":"*a_*einstein_coefficient","xSupp":"*b_*einstein_coefficient<X4>*a_einstein_coefficient","indx":"function(text, startPos) {\n               this.endMatch = \"-1\";\n               var m;\n               var t = JSON.parse(filterTheText(this.reg, text.slice(startPos)));\n;\n               } else {\n                 m = t[0].match(new RegExp('^(?:'+this.reg+')'),'i');}\n               var endMatch = -1;\n               var rightTst = false;\n               var leftTst = false;\n               var middleTst = true;\n               var capTst = true;\n               if (m) {\n                 endMatch = t[1][m[0].length-1] + 1 + startPos;\n;}\n                 leftTst = true;\n                 rightTst = true;\n;}\n;}\n;}\n;}\n;}\n;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/[A-Z]/).length > 1) {capTst = false;}\n                 if (this.reg.match(/[^A-Z]/) && m[0].match(/[A-Z]/) && m[0].match(/^[a-z0-9]/)) {capTst = false;}\n;}\n                 if (text.slice(startPos, endMatch).match(/\\;/) && (!(m[0].match(/\\;+[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\,/) && (!(m[0].match(/\\, +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\:/) && (!(m[0].match(/\\: +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\?/) && (!(m[0].match(/\\? +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\!/) && (!(m[0].match(/\\! +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\(/) && (!(m[0].match(/\\( +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\)/) && (!(m[0].match(/\\) +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\[/) && (!(m[0].match(/\\[ +[A-Z]/)))) {middleTst = false;}\n                 if (text.slice(startPos, endMatch).match(/\\]/) && (!(m[0].match(/\\] +[A-Z]/)))) {middleTst = false;}\n               }\n;}\n               this.endMatch = \"\"+endMatch;\n               return this.tIndx;}"}]